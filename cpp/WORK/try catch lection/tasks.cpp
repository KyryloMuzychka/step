//Задание 1: Валидация данных пользователя
//Задача : Напишите функцию, которая принимает имя пользователя и возраст при регистрации в системе.Имя должно быть не короче 3 символов и не длиннее 50 символов.Возраст должен быть в пределах от 18 до 120 лет.Если данные не проходят валидацию, функция должна генерировать соответствующее исключение.
//
//Задание 2 : Расчёт стоимости заказа
//Задача : Создайте функцию, которая вычисляет общую стоимость заказа на основе переданного количества товаров и их цены.Если количество товаров отрицательное или цена за единицу ниже нуля, должно генерироваться исключение.Функция должна также проверять, не превышает ли общая стоимость максимально допустимый порог и генерировать исключение, если порог превышен.
//
//Задание 3 : Управление доступом
//Задача : Реализуйте систему управления доступом в офис.Функция получает уровень доступа сотрудника и номер комнаты, которую он хочет открыть.Некоторые комнаты требуют повышенного уровня доступа.Если уровень доступа сотрудника не соответствует требуемому уровню комнаты, должно генерироваться исключение.
//
//Задание 4 : Бронирование мест
//Задача : Напишите функцию для бронирования мест в кинотеатре.Функция должна принимать номер ряда и номер места.Если указанный ряд или место не существует или уже забронировано, функция должна генерировать исключение.
//
//Задание 5 : Регистрация на событие
//Задача : Создайте функцию для регистрации на спортивное событие, которая принимает возраст и пол участника.Событие разделено на возрастные категории(например, 18 - 35, 36 - 50, 50 + ).Если участник не попадает ни в одну из категорий или категория для их пола заполнена, функция должна генерировать исключение.

#include <iostream>
#include <stdexcept>

// Функция валидации данных пользователя
void validateUser(const string& name, int age) {
    // Проверка длины имени
    if (name.length() < 3 || name.length() > 50) {
        throw invalid_argument("Имя должно быть от 3 до 50 символов");
    }
    // Проверка возраста
    if (age < 18 || age > 120) {
        throw invalid_argument("Возраст должен быть от 18 до 120 лет");
    }
    cout << "Регистрация прошла успешно" << endl;
}

int main() {
    try {
        validateUser("John Doe", 17);
    }
    catch (const invalid_argument& e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
    return 0;
}


#include <iostream>
#include <stdexcept>

// Функция расчета стоимости заказа
double calculateOrder(int count, double price) {
    // Проверка количества товаров
    if (count < 0) {
        throw invalid_argument("Количество товаров не может быть отрицательным");
    }
    // Проверка цены товара
    if (price < 0) {
        throw invalid_argument("Цена товара не может быть отрицательной");
    }
    double total = count * price;
    // Проверка на максимальную стоимость заказа
    if (total > 10000) {
        throw overflow_error("Превышен максимальный порог стоимости заказа");
    }
    return total;
}

int main() {
    try {
        double total = calculateOrder(10, -50);
        cout << "Общая стоимость заказа: $" << total << endl;
    }
    catch (const exception& e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
    return 0;
}


#include <iostream>
#include <stdexcept>

// Функция проверки доступа сотрудника
void checkAccess(int employeeLevel, int roomLevel) {
    // Проверка уровня доступа сотрудника
    if (employeeLevel < roomLevel) {
        throw runtime_error("Доступ к комнате запрещен");
    }
    cout << "Доступ к комнате разрешен" << endl;
}

int main() {
    try {
        checkAccess(2, 3);
    }
    catch (const runtime_error& e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
    return 0;
}


#include <iostream>
#include <vector>
#include <stdexcept>

// Функция бронирования места в кинотеатре
void bookSeat(vector<vector<bool>>& seats, int row, int seat) {
    // Проверка наличия ряда и места
    if (row >= seats.size() || seat >= seats[row].size() || row < 0 || seat < 0) {
        throw out_of_range("Место или ряд не существует");
    }
    // Проверка статуса места
    if (seats[row][seat]) {
        throw logic_error("Место уже забронировано");
    }
    seats[row][seat] = true;
    cout << "Место успешно забронировано" << endl;
}

int main() {
    vector<vector<bool>> cinema(5, vector<bool>(5, false)); // Кинозал 5x5
    try {
        bookSeat(cinema, 3, 4);
        bookSeat(cinema, 3, 4); // Повторная попытка бронирования
    }
    catch (const exception& e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
    return 0;
}


#include <iostream>
#include <stdexcept>

// Функция регистрации на спортивное событие
void registerForEvent(int age, char gender, int ageLimit, char genderRequirement) {
    // Проверка возрастного ограничения
    if (age > ageLimit) {
        throw invalid_argument("Возраст участника выше возрастного предела");
    }
    // Проверка пола участника
    if (gender != genderRequirement) {
        throw invalid_argument("Событие не предназначено для вашего пола");
    }
    cout << "Регистрация на событие прошла успешно" << endl;
}

int main() {
    try {
        registerForEvent(34, 'M', 35, 'M'); // Успешная регистрация
        registerForEvent(36, 'M', 35, 'M'); // Ошибка возраста
    }
    catch (const invalid_argument& e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
    return 0;
}

