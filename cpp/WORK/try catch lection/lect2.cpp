// Как работает обработка исключений :
// Перехват исключений : Когда в блоке try генерируется исключение, 
// выполнение блока прерывается, и C++ начинает поиск подходящего блока catch начиная от блока try 
// и двигаясь вверх по стеку вызовов.Это обеспечивает структурированное и предсказуемое управление ошибками.

// Несколько уровней блоков catch : 
// Можно определить несколько блоков catch для обработки различных типов исключений.
// Это позволяет более тонко настроить обработку ошибок, предоставляя специализированные обработчики для каждого типа исключения.

try {
    // Код, который может генерировать разные типы исключений
    riskyFunction();
}
catch (const invalid_argument& e) {
    cerr << "Invalid argument error: " << e.what() << endl;
    // Специфическая обработка для invalid_argument
}
catch (const out_of_range& e) {
    cerr << "Out of range error: " << e.what() << endl;
    // Специфическая обработка для out_of_range
}
catch (...) {
    cerr << "Unknown exception caught" << endl;
    // Обработка всех неуказанных типов исключений
}

// В этом примере, если riskyFunction() генерирует invalid_argument, 
// будет выполнен первый блок catch.Если возникает out_of_range, 
// обработка переходит ко второму блоку.Блок catch (...) перехватывает все типы исключений, 
// которые не были перехвачены предыдущими блоками.

// Обработка и перехват исключений :
// Обработка исключений не ограничивается только логированием или простым сообщением пользователю.
// Вы можете восстанавливать состояние программы, освобождать ресурсы,
//  выполнять компенсационные операции и даже повторно генерировать исключения для дальнейшей обработки.
// Это делает механизм исключений мощным инструментом для разработки надежных приложений.