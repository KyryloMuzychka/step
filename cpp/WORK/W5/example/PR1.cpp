//Задача 1: Определение и использование структуры
//Цель : Создать структуру Car для хранения информации об автомобиле.
//
//Определите структуру Car с полями : make(марка, строка), model(модель, строка) и year(год выпуска, целое число).
//Напишите функцию, которая принимает объект Car и выводит его данные.
//Задача 2 : Работа со списком структур
//Цель : Создать массив структур Car и вывести информацию о каждом автомобиле.
//
//Определите массив из трёх автомобилей типа Car и инициализируйте его различными значениями.
//Напишите функцию, которая принимает массив автомобилей и их количество, затем выводит информацию о каждом автомобиле.
//Задача 3 : Вложенные структуры
//Цель : Создать структуру Person с вложенной структурой DateOfBirth.
//
//Определите структуру DateOfBirth с полями : day, month, и year.
//Определите структуру Person с полями : name(имя, строка) и dob(дата рождения, DateOfBirth).
//Напишите функцию, которая принимает Person и выводит его имя и дату рождения.
//Задача 4 : Динамическое управление структурами
//Цель : Работа со списком структур, динамически изменяемым во время выполнения программы.
//
//Создайте динамический массив структур Person.
//Напишите функции для добавления нового Person в массив и вывода всех людей в массиве.
//Убедитесь, что программа корректно управляет памятью(выделение и освобождение памяти).
//Задача 5 : Комплексная задача с использованием структур
//Цель : Создать систему для управления библиотекой.
//
//Определите структуры Book(с полями : название, автор, год издания) и Library(содержащую массив книг и количество книг).
//Реализуйте функции для добавления книги в библиотеку, поиска книги по названию и вывода всего списка книг.
//Дополнительно : реализуйте функции для удаления книги из библиотеки и редактирования информации о книге.

#include <iostream>
#include <string>
using namespace std;

struct Student {
    string name;
    int age;
    double gpa;
};

void printStudent(const Student& student) {
    cout << "Name: " << student.name
        << ", Age: " << student.age
        << ", GPA: " << student.gpa << endl;
}

void updateStudentGPA(Student& student, double newGpa) {
    student.gpa = newGpa;
}



void printStudentNames(const Student students[], int size) {
    for (int i = 0; i < size; ++i) {
        cout << students[i].name << endl;
    }
}

int main() {
    // Создаем массив студентов
    Student students[] = {
        {"Alice", 20, 3.8},
        {"Bob", 22, 3.5},
        {"Charlie", 19, 3.9}
    };

    Student student1 = { "Alice", 20, 3.8 };

    // Создание экземпляра структуры и последующая инициализация
    Student student2;
    student2.name = "Bob";
    student2.age = 22;
    student2.gpa = 3.5;

    Student student = { "Charlie", 19, 3.9 };

    printStudent(student); // Вывод информации о студенте

    updateStudentGPA(student, 4.0); // Обновление GPA студента

    printStudent(student); // Повторный вывод информации для проверки изменений

    // Вызываем функцию для вывода имен студентов
    printStudentNames(students, sizeof(students) / sizeof(students[0]));

    return 0;
}
