Функции
Задание 1
Описание: Напишите рекурсивную функцию GCD (Greatest Common Divisor), которая принимает два целых числа и возвращает их наибольший общий делитель, используя алгоритм Евклида.
Требования:
Реализуйте функцию с использованием рекурсии.
Обработайте случай, когда одно из чисел равно нулю.

Задание 2
Перевод числа в текст
Описание: Напишите функцию NumberToWords, которая принимает целое число и возвращает его текстовое представление на английском языке. Ограничьтесь числами в диапазоне от 0 до 9999.
Требования:
Обработайте числа от 0 до 9999.
Используйте отдельные функции для обработки сотен, десятков и единиц.

Задание 3
Описание: Напишите функцию SumOfDigits, которая принимает целое число и возвращает сумму его цифр.
Требования:
Реализуйте функцию, которая разбивает число на отдельные цифры и суммирует их.
Обеспечьте корректную работу функции с отрицательными числами.

Задание 4
Описание: Напишите функцию IsEven, которая принимает целое число и возвращает true, если число четное, и false — если нечетное.
Требования:
Реализуйте простую проверку с использованием оператора %.
Обеспечьте корректную работу функции для всех целых чисел, включая ноль.


Перечисления
Задание 1
Создайте перечисление DayOfWeek, представляющее дни недели (Monday, Tuesday, Wednesday и т.д.). Напишите функцию IsWeekend, которая принимает значение этого перечисления и возвращает true, если день является выходным (суббота или воскресенье), и false в противном случае.

Задание 2
Создайте перечисление Month, представляющее все месяцы года. Напишите функцию GetSeason, которая принимает значение этого перечисления и возвращает строку, представляющую сезон года (Winter, Spring, Summer, Fall).

Задание 3
Создайте перечисление Color с несколькими значениями (Red, Green, Blue, Yellow). Напишите функцию ColorToString, которая принимает значение этого перечисления и возвращает его строковое представление.

Задание 4
Создайте перечисление AccessLevel, представляющее различные уровни доступа в системе (User, Moderator, Admin). Напишите функцию HasAdminAccess, которая принимает значение этого перечисления и возвращает true, если уровень доступа равен Admin, и false в противном случае.

Классы
задание 1
Создайте класс Book, который будет представлять книгу. Класс должен содержать следующие закрытые поля: title (название книги), author (автор) и pages (количество страниц). Реализуйте свойства для доступа к этим полям. Добавьте конструктор, который принимает значения для всех полей. Создайте метод GetDescription, который возвращает строку с описанием книги.

Задание 2
Создайте класс Employee, который будет представлять сотрудника. Класс должен содержать закрытые поля: name (имя), position (должность) и salary (зарплата). Реализуйте свойства для доступа к этим полям. Добавьте конструктор для инициализации всех полей и метод RaiseSalary, который увеличивает зарплату на заданный процент.

Задание 3
Создайте класс Circle, который будет представлять круг. Класс должен содержать закрытое поле radius (радиус круга). Реализуйте свойство для доступа к радиусу с проверкой, что значение не может быть меньше или равно нулю. Добавьте конструктор для инициализации радиуса и метод GetArea, который возвращает площадь круга.

Задание 4
Создайте класс Car, который будет представлять автомобиль. Класс должен содержать закрытые поля: make (марка автомобиля), model (модель) и year (год выпуска). Реализуйте свойства для доступа к этим полям. Добавьте конструктор для инициализации всех полей. Создайте метод GetCarInfo, который возвращает строку с информацией об автомобиле.

Задание 5
Создайте класс BankAccount, который будет представлять банковский счет. Класс должен содержать закрытые поля: accountNumber (номер счета) и balance (баланс). Реализуйте свойства для доступа к этим полям, при этом баланс должен быть только для чтения. Добавьте конструктор для инициализации номера счета и начального баланса. Создайте методы Deposit (для пополнения счета) и Withdraw (для снятия средств с учетом проверки наличия достаточных средств).
